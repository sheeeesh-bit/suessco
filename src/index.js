// Auto-generated static files - DO NOT EDIT MANUALLY
// Generated on 2025-07-15T11:29:26.383Z
const staticFiles = {
  "/suessco/index.html": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>title</title>\n</head>\n<body>\n    \n</body>\n</html>",
  "/index.html": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>title</title>\n</head>\n<body>\n    \n</body>\n</html>",
  "/suessco/show-project-name-and-id/design.css": "br {\n    display: block; /* Ensures line breaks are displayed */\n    margin-top: 10px; /* Adjusts spacing between elements */\n}\n\n.font-large {\n    font-size: 20px;\n    font-family: Arial, sans-serif; /* Sets font family */\n}\n\n.strong {\n    font-weight: bold; /* Makes text bold */\n}\n\n.installation-date {\n    font-size: 20px;\n    font-family: Arial, sans-serif; /* Sets font family */\n}\n\n.date {\n    display: inline; /* Keeps the date inline with the text */\n    font-size: 20px;\n    font-family: Arial, sans-serif; /* Matches font family */\n}\n",
  "/show-project-name-and-id/design.css": "br {\n    display: block; /* Ensures line breaks are displayed */\n    margin-top: 10px; /* Adjusts spacing between elements */\n}\n\n.font-large {\n    font-size: 20px;\n    font-family: Arial, sans-serif; /* Sets font family */\n}\n\n.strong {\n    font-weight: bold; /* Makes text bold */\n}\n\n.installation-date {\n    font-size: 20px;\n    font-family: Arial, sans-serif; /* Sets font family */\n}\n\n.date {\n    display: inline; /* Keeps the date inline with the text */\n    font-size: 20px;\n    font-family: Arial, sans-serif; /* Matches font family */\n}\n",
  "/suessco/show-project-name-and-id/index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Sensor Project Dashboard</title>\n\n    <!-- Link to external CSS -->\n    <link rel=\"stylesheet\" href=\"https://suessco-worker.thomas-potzmader.workers.dev/show-project-name-and-id/main.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <br>\n        <span class=\"font-large\">\n            <strong id=\"userLabel-label\">{i18n:dashboard.sensor.sensor-project}</strong> <span id=\"userLabel\">\\${userLabel}</span>\n        </span>\n\n        <br>\n\n        <span class=\"font-large\">\n            <strong id=\"name-label\">{i18n:dashboard.sensor.sensor-project-id}</strong> <span id=\"name\">\\${name}</span>\n        </span>\n    </div>\n\n    <script>\n        // Function to parse URL parameters\n        function getUrlParameters() {\n            const params = new URLSearchParams(window.location.search);\n            const result = {};\n            \n            for (const [key, value] of params.entries()) {\n                result[key] = value;\n            }\n            \n            return result;\n        }\n\n        // Function to populate the page with URL parameters\n        function populateFromUrlParams() {\n            const params = getUrlParameters();\n            \n            // Update userLabel and its label\n            if (params['userLabel-label']) {\n                const labelElement = document.getElementById('userLabel-label');\n                labelElement.textContent = params['userLabel-label'];\n            }\n            \n            if (params['userLabel']) {\n                const valueElement = document.getElementById('userLabel');\n                valueElement.textContent = params['userLabel'];\n            }\n            \n            // Update name and its label\n            if (params['name-label']) {\n                const labelElement = document.getElementById('name-label');\n                labelElement.textContent = params['name-label'];\n            }\n            \n            if (params['name']) {\n                const valueElement = document.getElementById('name');\n                valueElement.textContent = params['name'];\n            }\n        }\n\n        // Run when the page loads\n        document.addEventListener('DOMContentLoaded', populateFromUrlParams);\n    </script>\n</body>\n</html>\n",
  "/show-project-name-and-id/index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Sensor Project Dashboard</title>\n\n    <!-- Link to external CSS -->\n    <link rel=\"stylesheet\" href=\"https://suessco-worker.thomas-potzmader.workers.dev/show-project-name-and-id/main.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <br>\n        <span class=\"font-large\">\n            <strong id=\"userLabel-label\">{i18n:dashboard.sensor.sensor-project}</strong> <span id=\"userLabel\">\\${userLabel}</span>\n        </span>\n\n        <br>\n\n        <span class=\"font-large\">\n            <strong id=\"name-label\">{i18n:dashboard.sensor.sensor-project-id}</strong> <span id=\"name\">\\${name}</span>\n        </span>\n    </div>\n\n    <script>\n        // Function to parse URL parameters\n        function getUrlParameters() {\n            const params = new URLSearchParams(window.location.search);\n            const result = {};\n            \n            for (const [key, value] of params.entries()) {\n                result[key] = value;\n            }\n            \n            return result;\n        }\n\n        // Function to populate the page with URL parameters\n        function populateFromUrlParams() {\n            const params = getUrlParameters();\n            \n            // Update userLabel and its label\n            if (params['userLabel-label']) {\n                const labelElement = document.getElementById('userLabel-label');\n                labelElement.textContent = params['userLabel-label'];\n            }\n            \n            if (params['userLabel']) {\n                const valueElement = document.getElementById('userLabel');\n                valueElement.textContent = params['userLabel'];\n            }\n            \n            // Update name and its label\n            if (params['name-label']) {\n                const labelElement = document.getElementById('name-label');\n                labelElement.textContent = params['name-label'];\n            }\n            \n            if (params['name']) {\n                const valueElement = document.getElementById('name');\n                valueElement.textContent = params['name'];\n            }\n        }\n\n        // Run when the page loads\n        document.addEventListener('DOMContentLoaded', populateFromUrlParams);\n    </script>\n</body>\n</html>\n",
  "/suessco/show-project-name-and-id/": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Sensor Project Dashboard</title>\n\n    <!-- Link to external CSS -->\n    <link rel=\"stylesheet\" href=\"https://suessco-worker.thomas-potzmader.workers.dev/show-project-name-and-id/main.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <br>\n        <span class=\"font-large\">\n            <strong id=\"userLabel-label\">{i18n:dashboard.sensor.sensor-project}</strong> <span id=\"userLabel\">\\${userLabel}</span>\n        </span>\n\n        <br>\n\n        <span class=\"font-large\">\n            <strong id=\"name-label\">{i18n:dashboard.sensor.sensor-project-id}</strong> <span id=\"name\">\\${name}</span>\n        </span>\n    </div>\n\n    <script>\n        // Function to parse URL parameters\n        function getUrlParameters() {\n            const params = new URLSearchParams(window.location.search);\n            const result = {};\n            \n            for (const [key, value] of params.entries()) {\n                result[key] = value;\n            }\n            \n            return result;\n        }\n\n        // Function to populate the page with URL parameters\n        function populateFromUrlParams() {\n            const params = getUrlParameters();\n            \n            // Update userLabel and its label\n            if (params['userLabel-label']) {\n                const labelElement = document.getElementById('userLabel-label');\n                labelElement.textContent = params['userLabel-label'];\n            }\n            \n            if (params['userLabel']) {\n                const valueElement = document.getElementById('userLabel');\n                valueElement.textContent = params['userLabel'];\n            }\n            \n            // Update name and its label\n            if (params['name-label']) {\n                const labelElement = document.getElementById('name-label');\n                labelElement.textContent = params['name-label'];\n            }\n            \n            if (params['name']) {\n                const valueElement = document.getElementById('name');\n                valueElement.textContent = params['name'];\n            }\n        }\n\n        // Run when the page loads\n        document.addEventListener('DOMContentLoaded', populateFromUrlParams);\n    </script>\n</body>\n</html>\n",
  "/show-project-name-and-id/": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Sensor Project Dashboard</title>\n\n    <!-- Link to external CSS -->\n    <link rel=\"stylesheet\" href=\"https://suessco-worker.thomas-potzmader.workers.dev/show-project-name-and-id/main.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <br>\n        <span class=\"font-large\">\n            <strong id=\"userLabel-label\">{i18n:dashboard.sensor.sensor-project}</strong> <span id=\"userLabel\">\\${userLabel}</span>\n        </span>\n\n        <br>\n\n        <span class=\"font-large\">\n            <strong id=\"name-label\">{i18n:dashboard.sensor.sensor-project-id}</strong> <span id=\"name\">\\${name}</span>\n        </span>\n    </div>\n\n    <script>\n        // Function to parse URL parameters\n        function getUrlParameters() {\n            const params = new URLSearchParams(window.location.search);\n            const result = {};\n            \n            for (const [key, value] of params.entries()) {\n                result[key] = value;\n            }\n            \n            return result;\n        }\n\n        // Function to populate the page with URL parameters\n        function populateFromUrlParams() {\n            const params = getUrlParameters();\n            \n            // Update userLabel and its label\n            if (params['userLabel-label']) {\n                const labelElement = document.getElementById('userLabel-label');\n                labelElement.textContent = params['userLabel-label'];\n            }\n            \n            if (params['userLabel']) {\n                const valueElement = document.getElementById('userLabel');\n                valueElement.textContent = params['userLabel'];\n            }\n            \n            // Update name and its label\n            if (params['name-label']) {\n                const labelElement = document.getElementById('name-label');\n                labelElement.textContent = params['name-label'];\n            }\n            \n            if (params['name']) {\n                const valueElement = document.getElementById('name');\n                valueElement.textContent = params['name'];\n            }\n        }\n\n        // Run when the page loads\n        document.addEventListener('DOMContentLoaded', populateFromUrlParams);\n    </script>\n</body>\n</html>\n",
  "/suessco/show-project-name-and-id/main.js": "export default function handelCTX(ctx = null) {\n  if (ctx != null) {\n    // Extract data\n    const userLabel = ctx.data?.[0]?.data?.[0]?.[1] || \"No Data\";\n    const name = ctx.data?.[1]?.data?.[0]?.[1] || \"No Data\";\n\n    // Translations\n    const userLabelLabel = ctx.translate?.instant('dashboard.sensor.sensor-project') || \"Project\";\n    const nameLabel = ctx.translate?.instant('dashboard.sensor.sensor-project-id') || \"Project ID\";\n\n    // HTML content with external CSS\n    return `\n      <link rel=\"stylesheet\" href=\"https://suessco-worker.thomas-potzmader.workers.dev/show-project-name-and-id/design.css\">\n      <div class=\"container\">\n        <br>\n        <span class=\"font-large\">\n          <strong>${userLabelLabel}</strong> <span>${userLabel}</span>\n        </span>\n        <br>\n        <span class=\"font-large\">\n          <strong>${nameLabel}</strong> <span>${name}</span>\n        </span>\n      </div>\n    `;\n  }\n\n  // Fallback when context is not available\n  return `\n    <link rel=\"stylesheet\" href=\"https://suessco-worker.thomas-potzmader.workers.dev/show-project-name-and-id/design.css\">\n    <div class=\"container\">\n      <br>\n      <span class=\"font-large\">\n        <strong>Project</strong> <span>No Data</span>\n      </span>\n      <br>\n      <span class=\"font-large\">\n        <strong>Project ID</strong> <span>No Data</span>\n      </span>\n    </div>\n  `;\n}\n",
  "/show-project-name-and-id/main.js": "export default function handelCTX(ctx = null) {\n  if (ctx != null) {\n    // Extract data\n    const userLabel = ctx.data?.[0]?.data?.[0]?.[1] || \"No Data\";\n    const name = ctx.data?.[1]?.data?.[0]?.[1] || \"No Data\";\n\n    // Translations\n    const userLabelLabel = ctx.translate?.instant('dashboard.sensor.sensor-project') || \"Project\";\n    const nameLabel = ctx.translate?.instant('dashboard.sensor.sensor-project-id') || \"Project ID\";\n\n    // HTML content with external CSS\n    return `\n      <link rel=\"stylesheet\" href=\"https://suessco-worker.thomas-potzmader.workers.dev/show-project-name-and-id/design.css\">\n      <div class=\"container\">\n        <br>\n        <span class=\"font-large\">\n          <strong>${userLabelLabel}</strong> <span>${userLabel}</span>\n        </span>\n        <br>\n        <span class=\"font-large\">\n          <strong>${nameLabel}</strong> <span>${name}</span>\n        </span>\n      </div>\n    `;\n  }\n\n  // Fallback when context is not available\n  return `\n    <link rel=\"stylesheet\" href=\"https://suessco-worker.thomas-potzmader.workers.dev/show-project-name-and-id/design.css\">\n    <div class=\"container\">\n      <br>\n      <span class=\"font-large\">\n        <strong>Project</strong> <span>No Data</span>\n      </span>\n      <br>\n      <span class=\"font-large\">\n        <strong>Project ID</strong> <span>No Data</span>\n      </span>\n    </div>\n  `;\n}\n",
  "/suessco/": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>title</title>\n</head>\n<body>\n    \n</body>\n</html>",
  "/": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>title</title>\n</head>\n<body>\n    \n</body>\n</html>"
};

// MIME types for different file extensions
const mimeTypes = {
  '.html': 'text/html',
  '.css': 'text/css',
  '.js': 'application/javascript',
  '.json': 'application/json',
  '.png': 'image/png',
  '.jpg': 'image/jpeg',
  '.jpeg': 'image/jpeg',
  '.gif': 'image/gif',
  '.svg': 'image/svg+xml',
  '.ico': 'image/x-icon'
};

function getMimeType(path) {
  const extension = path.substring(path.lastIndexOf('.'));
  return mimeTypes[extension] || 'text/plain';
}

export default {
  async fetch(request) {
    const url = new URL(request.url);
    let path = url.pathname;
    
    // Handle root redirect
    if (path === '/') {
      path = '/suessco/';
    }
    
    // Handle directory requests (add trailing slash if missing)
    if (path === '/suessco' || path === '/suessco/show-project-name-and-id') {
      path += '/';
    }
    
    // Check if we have this static file
    if (staticFiles[path]) {
      const content = staticFiles[path];
      const mimeType = getMimeType(path);
      
      return new Response(content, {
        headers: {
          'Content-Type': mimeType,
          'Cache-Control': 'public, max-age=3600',
          'Access-Control-Allow-Origin': '*'
        }
      });
    }
    
    // Return 404 for unknown paths
    return new Response('Not Found', { 
      status: 404,
      headers: {
        'Content-Type': 'text/plain'
      }
    });
  }
};